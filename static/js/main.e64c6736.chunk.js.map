{"version":3,"sources":["img/bg.png","gameHelpers.js","components/styles/StyledTetris.js","hooks/useStage.js","tetrominos.js","components/styles/StyledCell.js","components/Cell.js","components/styles/StyledStage.js","components/Stage.js","components/styles/StyledDisplay.js","components/Display.js","components/styles/StyledStartButton.js","components/StartButton.js","components/Tetris.js","hooks/usePlayer.js","hooks/useGameStatus.js","hooks/useInterval.js","App.js","index.js"],"names":["module","exports","createStage","Array","from","fill","checkCollision","player","stage","moveX","x","moveY","y","tetromino","length","pos","StyledTetrisWrapper","styled","div","bgImage","StyledTetris","useStage","resetPlayer","useState","setStage","rowsCleadered","setRowsCleared","useEffect","updateStage","prevStage","newStage","map","row","cell","forEach","value","collided","reduce","ack","findIndex","prev","unshift","push","sweepRows","TETROMINOS","0","shape","color","I","J","L","O","S","T","Z","randomTetromino","randTetromino","Math","floor","random","StyledCell","props","type","React","memo","StyledStage","height","width","Stage","key","StyledDisplay","gameOver","Display","text","StyledStartButton","button","StartButton","callback","onClick","Tetris","dropTime","setDropTime","setGameOver","setPlayer","rotate","matrix","dir","rotatedTetro","_","index","col","reverse","useCallback","STAGE_WIDTH","clonedPlayer","JSON","parse","stringify","offset","usePlayer","updatePlayerPos","playerRotate","rowsCleared","score","setScore","rows","setRows","level","setLevel","linePoints","calcScore","useGameStatus","movePlayer","drop","move","keyCode","delay","savedCallback","useRef","current","id","setInterval","clearInterval","useInterval","role","tabIndex","onKeyDown","e","onKeyUp","App","className","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e64c6736.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bg.aad4d438.png\";","export const STAGE_WIDTH = 12;\r\nexport const STAGE_HEIGHT = 20;\r\n\r\nexport const createStage = () =>\r\n    Array.from(Array(STAGE_HEIGHT), () =>\r\n        Array(STAGE_WIDTH).fill([0, 'clear'])\r\n    );\r\n\r\nexport const checkCollision = (player, stage, { x: moveX, y: moveY }) => {\r\n\r\n    for (let y = 0; y < player.tetromino.length; y += 1) {\r\n        for (let x = 0; x < player.tetromino[y].length; x += 1) {\r\n\r\n            // Check if on a cell\r\n            if (player.tetromino[y][x] !== 0) {\r\n                if (\r\n                    // Check if move is inside game area height(y)\r\n                    !stage[y + player.pos.y + moveY] ||\r\n                    // Check if move is inside game area width(x)\r\n                    !stage[y + player.pos.y + moveY][x + player.pos.x + moveX] ||\r\n                    // Check if moving cell is not set to clear\r\n                    stage[y + player.pos.y + moveY][x + player.pos.x + moveX][1] !== 'clear'\r\n                ) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // If above = false\r\n    return false;\r\n};\r\n","import styled from 'styled-components';\r\nimport bgImage from '../../img/bg.png';\r\n\r\nexport const StyledTetrisWrapper = styled.div`\r\n    width: 100vw;\r\n    height: 100vh;\r\n    overflow: hidden;\r\n    background: url(${bgImage}) #000;\r\n    background-size: cover;\r\n    background-repeat: no-repeat;\r\n`;\r\n\r\nexport const StyledTetris = styled.div`\r\n    display: flex;\r\n    padding: 40px;\r\n    margin: 0 auto;\r\n    max-width: 900px;\r\n    align-items: flex-start;\r\n    aside {\r\n        width: 100%;\r\n        max-width: 200px;\r\n        display: block;\r\n        padding: 0 20px;\r\n    };\r\n`;\r\n","import { useState, useEffect } from 'react';\r\n\r\nimport { createStage } from '../gameHelpers';\r\n\r\nexport const useStage = (player, resetPlayer) => {\r\n\r\n    const [stage, setStage] = useState(createStage());\r\n    const [rowsCleadered, setRowsCleared] = useState(0);\r\n\r\n    useEffect(() => {\r\n        setRowsCleared(0);\r\n        const sweepRows = newStage =>\r\n            newStage.reduce((ack, row) => {\r\n                if (row.findIndex(cell => cell[0] === 0) === -1) {\r\n                    setRowsCleared(prev => prev + 1);\r\n                    ack.unshift(new Array(newStage[0].length).fill([0, 'clear']));\r\n                    return ack;\r\n                }\r\n                ack.push(row);\r\n                return ack;\r\n            }, []);\r\n\r\n        const updateStage = prevStage => {\r\n            // Flush stage\r\n            const newStage = prevStage.map(row =>\r\n                row.map(cell => (cell[1] === 'clear' ? [0, 'clear'] : cell))\r\n            );\r\n\r\n            // Draw tetromino\r\n            player.tetromino.forEach((row, y) => {\r\n                row.forEach((value, x) => {\r\n                    if (value !== 0) {\r\n                        newStage[y + player.pos.y][x + player.pos.x] = [\r\n                            value,\r\n                            `${player.collided ? 'merged' : 'clear'}`,\r\n                        ];\r\n                    }\r\n                });\r\n            });\r\n\r\n            // Check if collided\r\n            if (player.collided) {\r\n                resetPlayer();\r\n                return sweepRows(newStage);\r\n            }\r\n            return newStage;\r\n        };\r\n        // Updates\r\n        setStage(prev => updateStage(prev));\r\n    }, [\r\n        player.collided,\r\n        player.pos.y,\r\n        player.pos.x,\r\n        player.tetromino,\r\n        resetPlayer,\r\n    ]);\r\n\r\n    return [stage, setStage, rowsCleadered];\r\n};\r\n","export const TETROMINOS = {\r\n    0: { shape: [[0]], color: '0, 0, 0' },\r\n    I: {\r\n        shape: [\r\n            [0, 'I', 0, 0],\r\n            [0, 'I', 0, 0],\r\n            [0, 'I', 0, 0],\r\n            [0, 'I', 0, 0],\r\n        ],\r\n        color: '168, 168, 168',\r\n    },\r\n    J: {\r\n        shape: [\r\n            [0, 'J', 0],\r\n            [0, 'J', 0],\r\n            ['J', 'J', 0],\r\n        ],\r\n        color: '148, 148, 148',\r\n    },\r\n    L: {\r\n        shape: [\r\n            [0, 'L', 0],\r\n            [0, 'L', 0],\r\n            [0, 'L', 'L'],\r\n        ],\r\n        color: '128, 128, 128',\r\n    },\r\n    O: {\r\n        shape: [\r\n            ['O', 'O'],\r\n            ['O', 'O'],\r\n        ],\r\n        color: '108, 108, 108',\r\n    },\r\n    S: {\r\n        shape: [\r\n            [0, 'S', 'S'],\r\n            ['S', 'S', 0],\r\n            [0, 0, 0],\r\n        ],\r\n        color: '88, 88, 88',\r\n    },\r\n    T: {\r\n        shape: [\r\n            [0, 0, 0],\r\n            ['T', 'T', 'T'],\r\n            [0, 'T', 0],\r\n        ],\r\n        color: '68, 68, 68',\r\n    },\r\n    Z: {\r\n        shape: [\r\n            ['Z', 'Z', 0],\r\n            [0, 'Z', 'Z'],\r\n            [0, 0, 0],\r\n        ],\r\n        color: ['48, 48, 48'],\r\n    },\r\n};\r\n\r\nexport const randomTetromino = () => {\r\n    const tetrominos = 'IJLOSTZ';\r\n    const randTetromino = tetrominos[Math.floor(Math.random() * tetrominos.length)];\r\n    return TETROMINOS[randTetromino];\r\n};\r\n","import styled from 'styled-components';\r\n\r\nexport const StyledCell = styled.div`\r\n\r\nwidth: auto;\r\nbackground: rgba(${props => props.color}, 0.8);\r\nborder: ${props => (props.type === 0 ? '0px' : '3px solid')};\r\nborder-top-color: rgba(${props => props.color}, 1);\r\nborder-right-color: rgba(${props => props.color}, 1);\r\nborder-bottom-color: rgba(${props => props.color}, 0.1);\r\nborder-left-color: rgba(${props => props.color}, 0.3);\r\n`;\r\n","import React from 'react';\r\nimport { StyledCell } from './styles/StyledCell';\r\nimport { TETROMINOS } from '../tetrominos';\r\n\r\nconst Cell = ({ type }) => (\r\n    <StyledCell\r\n        type={type}\r\n        color={TETROMINOS[type].color}\r\n    />\r\n);\r\n//React.memo ensures that it re-renders only the changed cells\r\nexport default React.memo(Cell);\r\n","import styled from 'styled-components';\r\n\r\nexport const StyledStage = styled.div`\r\n    grid-template-rows: repeat(\r\n        ${props => props.height},\r\n        calc(25vw / ${props => props.width})\r\n        );\r\n    display: grid;\r\n    width: 100%;\r\n    grid-gap: 1px;\r\n    max-width 25vw;\r\n    background: #111;\r\n    border: 4px solid #333;\r\n    grid-template-columns: repeat(${props => props.width}, 1fr);\r\n`;\r\n","import React from 'react';\r\n\r\nimport Cell from './Cell';\r\nimport { StyledStage } from './styles/StyledStage';\r\n\r\nconst Stage = ({ stage }) => (\r\n    <StyledStage\r\n        width={stage[0].length}\r\n        height={stage.length}\r\n    >\r\n        {stage.map(row =>\r\n            row.map((cell, x) =>\r\n                <Cell\r\n                    key={x}\r\n                    type={cell[0]}\r\n                />\r\n            ))\r\n        }\r\n    </StyledStage>\r\n);\r\n\r\nexport default Stage;\r\n","import styled from 'styled-components';\r\n\r\nexport const StyledDisplay = styled.div`\r\n\r\nwidth: 100%;\r\ndisplay: flex;\r\npadding: 20px;\r\nbackground: #000;\r\nmin-height: 30px;\r\nfont-size: 0.8rem;\r\nmargin: 0 0 20px 0;\r\nalign-items: center; \r\nborder-radius: 20px;\r\nbox-sizing: border-box;\r\nborder: 4px solid #333;\r\nfont-family: Pixel, Arial, Helvetica, sans-serif;\r\ncolor: ${props => (props.gameOver ? '#FF0000' : '#999')};\r\n\r\n`;","import React from 'react';\r\nimport { StyledDisplay } from './styles/StyledDisplay';\r\n\r\nconst Display = ({ gameOver, text }) => (\r\n    <StyledDisplay\r\n        gameOver={gameOver}\r\n    >\r\n        {text}\r\n    </StyledDisplay>\r\n);\r\n\r\nexport default Display;\r\n","import styled from 'styled-components';\r\n\r\nexport const StyledStartButton = styled.button`\r\n    color: #999;\r\n    width: 100%;\r\n    padding: 20px;\r\n    outline: none;\r\n    font-size: 1rem;\r\n    cursor: pointer;\r\n    background: #111;\r\n    margin: 0 0 20 0;\r\n    min-height: 30px;\r\n    border-radius: 20px;\r\n    border: 4px solid #333;\r\n    box-sizing: border-box;\r\n    font-family: Pixel, Arial, Helvetica, sans-serif;\r\n    &:hover {\r\n        color: #FFF;\r\n    };\r\n`;\r\n","import React from 'react';\r\n\r\nimport { StyledStartButton } from './styles/StyledStartButton';\r\n\r\nconst StartButton = ({ callback }) => (\r\n    <StyledStartButton\r\n        onClick={callback}\r\n    >\r\n        Start Game\r\n    </StyledStartButton>\r\n);\r\n\r\nexport default StartButton;\r\n","import React, { useState } from 'react';\r\nimport { createStage, checkCollision } from '../gameHelpers';\r\nimport { StyledTetrisWrapper, StyledTetris } from './styles/StyledTetris';\r\n\r\n// Hooks\r\nimport { useStage } from '../hooks/useStage';\r\nimport { usePlayer } from '../hooks/usePlayer';\r\nimport { useInterval } from '../hooks/useInterval';\r\nimport { useGameStatus } from '../hooks/useGameStatus';\r\n\r\n//Components\r\nimport Stage from './Stage';\r\nimport Display from './Display';\r\nimport StartButton from './StartButton';\r\n\r\nconst Tetris = () => {\r\n\r\n    const [dropTime, setDropTime] = useState(null);\r\n    const [gameOver, setGameOver] = useState(false);\r\n\r\n    const [player, updatePlayerPos, resetPlayer, playerRotate] = usePlayer();\r\n    const [stage, setStage, rowsCleared] = useStage(player, resetPlayer);\r\n    const [score, setScore, rows, setRows, level, setLevel] = useGameStatus(rowsCleared);\r\n\r\n    const movePlayer = dir => {\r\n        if (!checkCollision(player, stage, { x: dir, y: 0 })) {\r\n            updatePlayerPos({ x: dir, y: 0 });\r\n        }\r\n    };\r\n\r\n    const startGame = () => {\r\n        //resetAll\r\n        setStage(createStage());\r\n        setDropTime(1000);\r\n        resetPlayer();\r\n        setGameOver(false);\r\n        setScore(0);\r\n        setRows(0);\r\n        setLevel(0);\r\n    };\r\n\r\n    const drop = () => {\r\n        // Increase level when 10 rows are cleared\r\n        if (rows > (level + 1) * 10) {\r\n            setLevel(prev => prev + 1);\r\n            // Increase speed\r\n            setDropTime(1000 / (level + 1) + 200);\r\n        }\r\n\r\n        if (!checkCollision(player, stage, { x: 0, y: 1 })) {\r\n            updatePlayerPos({ x: 0, y: 1, collided: false });\r\n        } else {\r\n            // Game over\r\n            if (player.pos.y < 1) {\r\n                setGameOver(true);\r\n                setDropTime(null);\r\n            }\r\n            updatePlayerPos({ x: 0, y: 0, collided: true });\r\n        }\r\n    };\r\n\r\n    const keyUp = ({ keyCode }) => {\r\n        if (!gameOver) {\r\n            if (keyCode === 40) {\r\n                setDropTime(1000 / (level + 1) + 200);\r\n            }\r\n        }\r\n    };\r\n\r\n    const dropPlayer = () => {\r\n        setDropTime(null);\r\n        drop();\r\n    };\r\n\r\n    const move = ({ keyCode }) => {\r\n        if (!gameOver) {\r\n            if (keyCode === 37) { // Move to left using arrow key 'left'\r\n                movePlayer(-1);\r\n            } else if (keyCode === 39) { // Move to right using arrow key 'right'\r\n                movePlayer(1);\r\n            } else if (keyCode === 40) { // Drop using arrow key 'down'\r\n                dropPlayer();\r\n            } else if (keyCode === 38) { // Rotate using key 'up'\r\n                playerRotate(stage, 1);\r\n            } else if (keyCode === 80) { // Pause game using key 'p'\r\n                setDropTime(null);\r\n            }\r\n        }\r\n    };\r\n\r\n    useInterval(() => {\r\n        drop();\r\n    }, dropTime);\r\n\r\n    return (\r\n        <StyledTetrisWrapper\r\n            role='button'\r\n            tabIndex='0'\r\n            onKeyDown={e => move(e)}\r\n            onKeyUp={keyUp}\r\n        >\r\n            <StyledTetris>\r\n                <Stage stage={stage} />\r\n                <aside>\r\n                    {gameOver ? (\r\n                        <div>\r\n                            <Display gameOver={gameOver} text='game over!' />\r\n                            <Display text={`score: ${score}`} />\r\n                            <Display text={`level: ${level}`} />\r\n                        </div>\r\n                    ) : (\r\n                            <div>\r\n                                <Display text={`score: ${score}`} />\r\n                                <Display text={`level: ${level}`} />\r\n                            </div>\r\n                        )}\r\n                    <StartButton callback={startGame} />\r\n                </aside>\r\n            </StyledTetris>\r\n        </StyledTetrisWrapper>\r\n    )\r\n};\r\n\r\nexport default Tetris;\r\n","import { useState, useCallback } from 'react';\r\n\r\nimport { TETROMINOS, randomTetromino } from '../tetrominos';\r\nimport { STAGE_WIDTH, checkCollision } from '../gameHelpers';\r\n\r\nexport const usePlayer = () => {\r\n    const [player, setPlayer] = useState({\r\n        pos: { x: 0, y: 0 },\r\n        tetromino: TETROMINOS[0].shape,\r\n        collided: false,\r\n    });\r\n\r\n    const rotate = (matrix, dir) => { // matrix = tetromino\r\n        // Make rows transpose\r\n        const rotatedTetro = matrix.map((_, index) =>\r\n            matrix.map(col => col[index]));\r\n        // Reverse each row to get a rotated tetromino(matrix)\r\n        if (dir > 0) return rotatedTetro.map(row => row.reverse());\r\n        return rotatedTetro.reverse();\r\n    };\r\n\r\n    const playerRotate = (stage, dir) => {\r\n        const clonedPlayer = JSON.parse(JSON.stringify(player));\r\n        clonedPlayer.tetromino = rotate(clonedPlayer.tetromino, dir);\r\n\r\n        const pos = clonedPlayer.pos.x;\r\n        let offset = 1;\r\n        while (checkCollision(clonedPlayer, stage, { x: 0, y: 0 })) {\r\n            clonedPlayer.pos.x += offset;\r\n            offset = -(offset + (offset > 0 ? 1 : -1));\r\n            if (offset > clonedPlayer.tetromino[0].length) {\r\n                rotate(clonedPlayer.tetromino, -dir);\r\n                clonedPlayer.pos.x = pos;\r\n                return;\r\n            }\r\n        }\r\n        setPlayer(clonedPlayer);\r\n    };\r\n\r\n    const updatePlayerPos = ({ x, y, collided }) => {\r\n        setPlayer(prev => ({\r\n            ...prev,\r\n            pos: { x: (prev.pos.x += x), y: (prev.pos.y += y) },\r\n            collided,\r\n        }));\r\n    };\r\n\r\n    const resetPlayer = useCallback(() => {\r\n        setPlayer({\r\n            pos: { x: STAGE_WIDTH / 2 - 2, y: 0 },\r\n            tetromino: randomTetromino().shape,\r\n            collided: false,\r\n        });\r\n    }, []);\r\n\r\n    return [player, updatePlayerPos, resetPlayer, playerRotate];\r\n};\r\n","import { useState, useEffect, useCallback } from 'react';\r\n\r\nexport const useGameStatus = rowsCleared => {\r\n    const [score, setScore] = useState(0);\r\n    const [rows, setRows] = useState(0);\r\n    const [level, setLevel] = useState(0);\r\n\r\n    const linePoints = [40, 100, 300, 1200];\r\n\r\n    const calcScore = useCallback(() => {\r\n        // Check if there is score\r\n        if (rowsCleared > 0) {\r\n            // Formula to calculate score\r\n            setScore(prev => prev + linePoints[rowsCleared - 1] * (level + 1));\r\n            setRows(prev => prev + rowsCleared);\r\n        }\r\n    }, [level, linePoints, rowsCleared]);\r\n\r\n    useEffect(() => {\r\n        calcScore();\r\n    }, [calcScore, rowsCleared, score]);\r\n\r\n    return [score, setScore, rows, setRows, level, setLevel];\r\n};\r\n","import { useEffect, useRef } from 'react';\n\nexport function useInterval(callback, delay) {\n  const savedCallback = useRef();\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      const id = setInterval(tick, delay);\n      return () => {\n        clearInterval(id);\n      };\n    }\n  }, [delay]);\n}\n","import React from 'react';\n\nimport Tetris from './components/Tetris';\n\nconst App = () => (\n  <div className='App'>\n    <Tetris />\n  </div>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />, document.getElementById('root')\n);\n"],"sourceRoot":""}