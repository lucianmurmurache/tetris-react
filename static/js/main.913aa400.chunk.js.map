{"version":3,"sources":["img/bg.png","gameHelpers.js","components/styles/StyledTetris.js","hooks/useStage.js","tetrominos.js","components/styles/StyledCell.js","components/Cell.js","components/styles/StyledStage.js","components/Stage.js","components/styles/StyledDisplay.js","components/Display.js","components/styles/StyledStartButton.js","components/StartButton.js","components/Tetris.js","hooks/usePlayer.js","hooks/useGameStatus.js","hooks/useInterval.js","App.js","index.js"],"names":["module","exports","createStage","Array","from","fill","checkCollision","player","stage","moveX","x","moveY","y","tetromino","length","pos","StyledTetrisWrapper","styled","div","bgImage","StyledTetris","useStage","resetPlayer","useState","setStage","rowsCleadered","setRowsCleared","useEffect","updateStage","prevStage","newStage","map","row","cell","forEach","value","collided","reduce","ack","findIndex","prev","unshift","push","sweepRows","TETROMINOS","0","shape","color","I","J","L","O","S","T","Z","randomTetromino","randTetromino","Math","floor","random","StyledCell","props","type","React","memo","StyledStage","height","width","Stage","key","StyledDisplay","gameOver","Display","text","StyledStartButton","button","StartButton","callback","onClick","Tetris","dropTime","setDropTime","setGameOver","setPlayer","rotate","matrix","dir","rotatedTetro","_","index","col","reverse","useCallback","STAGE_WIDTH","clonedPlayer","JSON","parse","stringify","offset","usePlayer","updatePlayerPos","playerRotate","rowsCleared","score","setScore","rows","setRows","level","setLevel","linePoints","calcScore","useGameStatus","movePlayer","drop","move","keyCode","delay","savedCallback","useRef","current","id","setInterval","clearInterval","useInterval","role","tabIndex","onKeyDown","e","onKeyUp","App","className","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.913aa400.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bg.aad4d438.png\";","export const STAGE_WIDTH = 12;\r\nexport const STAGE_HEIGHT = 20;\r\n\r\nexport const createStage = () =>\r\n  Array.from(Array(STAGE_HEIGHT), () => Array(STAGE_WIDTH).fill([0, 'clear']));\r\n\r\nexport const checkCollision = (player, stage, { x: moveX, y: moveY }) => {\r\n  for (let y = 0; y < player.tetromino.length; y += 1) {\r\n    for (let x = 0; x < player.tetromino[y].length; x += 1) {\r\n      // Check if on a cell\r\n      if (player.tetromino[y][x] !== 0) {\r\n        if (\r\n          // Check if move is inside game area height(y)\r\n          !stage[y + player.pos.y + moveY] ||\r\n          // Check if move is inside game area width(x)\r\n          !stage[y + player.pos.y + moveY][x + player.pos.x + moveX] ||\r\n          // Check if moving cell is not set to clear\r\n          stage[y + player.pos.y + moveY][x + player.pos.x + moveX][1] !==\r\n            'clear'\r\n        ) {\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  // If above = false\r\n  return false;\r\n};\r\n","import styled from 'styled-components';\r\nimport bgImage from '../../img/bg.png';\r\n\r\nexport const StyledTetrisWrapper = styled.div`\r\n  width: 100vw;\r\n  height: 100vh;\r\n  overflow: hidden;\r\n  background: url(${bgImage}) #000;\r\n  background-size: cover;\r\n  background-repeat: no-repeat;\r\n`;\r\n\r\nexport const StyledTetris = styled.div`\r\n  display: flex;\r\n  padding: 20px;\r\n  margin: 0 auto;\r\n  max-width: 900px;\r\n  align-items: flex-start;\r\n  aside {\r\n    width: 100%;\r\n    max-width: 205px;\r\n    display: block;\r\n    padding: 0 20px;\r\n  }\r\n`;\r\n","import { useState, useEffect } from 'react';\r\n\r\nimport { createStage } from '../gameHelpers';\r\n\r\nexport const useStage = (player, resetPlayer) => {\r\n  const [stage, setStage] = useState(createStage());\r\n  const [rowsCleadered, setRowsCleared] = useState(0);\r\n\r\n  useEffect(() => {\r\n    setRowsCleared(0);\r\n    const sweepRows = (newStage) =>\r\n      newStage.reduce((ack, row) => {\r\n        if (row.findIndex((cell) => cell[0] === 0) === -1) {\r\n          setRowsCleared((prev) => prev + 1);\r\n          ack.unshift(new Array(newStage[0].length).fill([0, 'clear']));\r\n          return ack;\r\n        }\r\n        ack.push(row);\r\n        return ack;\r\n      }, []);\r\n\r\n    const updateStage = (prevStage) => {\r\n      // Flush stage\r\n      const newStage = prevStage.map((row) =>\r\n        row.map((cell) => (cell[1] === 'clear' ? [0, 'clear'] : cell)),\r\n      );\r\n\r\n      // Draw tetromino\r\n      player.tetromino.forEach((row, y) => {\r\n        row.forEach((value, x) => {\r\n          if (value !== 0) {\r\n            newStage[y + player.pos.y][x + player.pos.x] = [\r\n              value,\r\n              `${player.collided ? 'merged' : 'clear'}`,\r\n            ];\r\n          }\r\n        });\r\n      });\r\n\r\n      // Check if collided\r\n      if (player.collided) {\r\n        resetPlayer();\r\n        return sweepRows(newStage);\r\n      }\r\n      return newStage;\r\n    };\r\n    // Updates\r\n    setStage((prev) => updateStage(prev));\r\n  }, [\r\n    player.collided,\r\n    player.pos.y,\r\n    player.pos.x,\r\n    player.tetromino,\r\n    resetPlayer,\r\n  ]);\r\n\r\n  return [stage, setStage, rowsCleadered];\r\n};\r\n","export const TETROMINOS = {\r\n  0: { shape: [[0]], color: '0, 0, 0' },\r\n  I: {\r\n    shape: [\r\n      [0, 'I', 0, 0],\r\n      [0, 'I', 0, 0],\r\n      [0, 'I', 0, 0],\r\n      [0, 'I', 0, 0],\r\n    ],\r\n    color: '168, 168, 168',\r\n  },\r\n  J: {\r\n    shape: [\r\n      [0, 'J', 0],\r\n      [0, 'J', 0],\r\n      ['J', 'J', 0],\r\n    ],\r\n    color: '148, 148, 148',\r\n  },\r\n  L: {\r\n    shape: [\r\n      [0, 'L', 0],\r\n      [0, 'L', 0],\r\n      [0, 'L', 'L'],\r\n    ],\r\n    color: '128, 128, 128',\r\n  },\r\n  O: {\r\n    shape: [\r\n      ['O', 'O'],\r\n      ['O', 'O'],\r\n    ],\r\n    color: '108, 108, 108',\r\n  },\r\n  S: {\r\n    shape: [\r\n      [0, 'S', 'S'],\r\n      ['S', 'S', 0],\r\n      [0, 0, 0],\r\n    ],\r\n    color: '88, 88, 88',\r\n  },\r\n  T: {\r\n    shape: [\r\n      [0, 0, 0],\r\n      ['T', 'T', 'T'],\r\n      [0, 'T', 0],\r\n    ],\r\n    color: '68, 68, 68',\r\n  },\r\n  Z: {\r\n    shape: [\r\n      ['Z', 'Z', 0],\r\n      [0, 'Z', 'Z'],\r\n      [0, 0, 0],\r\n    ],\r\n    color: ['48, 48, 48'],\r\n  },\r\n};\r\n\r\nexport const randomTetromino = () => {\r\n  const tetrominos = 'IJLOSTZ';\r\n  const randTetromino =\r\n    tetrominos[Math.floor(Math.random() * tetrominos.length)];\r\n  return TETROMINOS[randTetromino];\r\n};\r\n","import styled from 'styled-components';\r\n\r\nexport const StyledCell = styled.div`\r\n  width: auto;\r\n  background: rgba(${(props) => props.color}, 0.8);\r\n  border: ${(props) => (props.type === 0 ? '0px' : '3px solid')};\r\n  border-top-color: rgba(${(props) => props.color}, 1);\r\n  border-right-color: rgba(${(props) => props.color}, 1);\r\n  border-bottom-color: rgba(${(props) => props.color}, 0.1);\r\n  border-left-color: rgba(${(props) => props.color}, 0.3);\r\n`;\r\n","import React from 'react';\r\nimport { StyledCell } from './styles/StyledCell';\r\nimport { TETROMINOS } from '../tetrominos';\r\n\r\nconst Cell = ({ type }) => (\r\n  <StyledCell type={type} color={TETROMINOS[type].color} />\r\n);\r\n//React.memo ensures that it re-renders only the changed cells\r\nexport default React.memo(Cell);\r\n","import styled from 'styled-components';\r\n\r\nexport const StyledStage = styled.div`\r\n    grid-template-rows: repeat(\r\n        ${(props) => props.height},\r\n        calc(25vw / ${(props) => props.width})\r\n        );\r\n    display: grid;\r\n    width: 100%;\r\n    grid-gap: 1px;\r\n    max-width 25vw;\r\n    background: #111;\r\n    border: 4px solid #333;\r\n    grid-template-columns: repeat(${(props) => props.width}, 1fr);\r\n`;\r\n","import React from 'react';\r\n\r\nimport Cell from './Cell';\r\nimport { StyledStage } from './styles/StyledStage';\r\n\r\nconst Stage = ({ stage }) => (\r\n  <StyledStage width={stage[0].length} height={stage.length}>\r\n    {stage.map((row) =>\r\n      row.map((cell, key) => <Cell key={key} type={cell[0]} />),\r\n    )}\r\n  </StyledStage>\r\n);\r\n\r\nexport default Stage;\r\n","import styled from 'styled-components';\r\n\r\nexport const StyledDisplay = styled.div`\r\n  width: 100%;\r\n  display: flex;\r\n  padding: 20px;\r\n  background: #000;\r\n  min-height: 30px;\r\n  font-size: 0.8rem;\r\n  margin: 0 0 20px 0;\r\n  align-items: center;\r\n  border-radius: 20px;\r\n  box-sizing: border-box;\r\n  border: 4px solid #333;\r\n  font-family: Pixel, Arial, Helvetica, sans-serif;\r\n  color: ${(props) => (props.gameOver ? '#FF0000' : '#999')};\r\n`;\r\n","import React from 'react';\r\nimport { StyledDisplay } from './styles/StyledDisplay';\r\n\r\nconst Display = ({ gameOver, text }) => (\r\n  <StyledDisplay gameOver={gameOver}>{text}</StyledDisplay>\r\n);\r\n\r\nexport default Display;\r\n","import styled from 'styled-components';\r\n\r\nexport const StyledStartButton = styled.button`\r\n  color: #999;\r\n  width: 100%;\r\n  padding: 20px;\r\n  outline: none;\r\n  font-size: 1rem;\r\n  cursor: pointer;\r\n  background: #111;\r\n  margin: 0 0 20 0;\r\n  min-height: 30px;\r\n  border-radius: 20px;\r\n  border: 4px solid #333;\r\n  box-sizing: border-box;\r\n  font-family: Pixel, Arial, Helvetica, sans-serif;\r\n  transition: all 320ms ease-in-out;\r\n  &:hover {\r\n    color: #fff;\r\n  }\r\n`;\r\n","import React from 'react';\r\n\r\nimport { StyledStartButton } from './styles/StyledStartButton';\r\n\r\nconst StartButton = ({ callback }) => (\r\n  <StyledStartButton onClick={callback}>Start Game</StyledStartButton>\r\n);\r\n\r\nexport default StartButton;\r\n","import React, { useState } from 'react';\nimport { createStage, checkCollision } from '../gameHelpers';\nimport { StyledTetrisWrapper, StyledTetris } from './styles/StyledTetris';\n\n// Hooks\nimport { useStage } from '../hooks/useStage';\nimport { usePlayer } from '../hooks/usePlayer';\nimport { useInterval } from '../hooks/useInterval';\nimport { useGameStatus } from '../hooks/useGameStatus';\n\n//Components\nimport Stage from './Stage';\nimport Display from './Display';\nimport StartButton from './StartButton';\n\nconst Tetris = () => {\n  const [dropTime, setDropTime] = useState(null);\n  const [gameOver, setGameOver] = useState(false);\n\n  const [player, updatePlayerPos, resetPlayer, playerRotate] = usePlayer();\n  const [stage, setStage, rowsCleared] = useStage(player, resetPlayer);\n  const [score, setScore, rows, setRows, level, setLevel] = useGameStatus(\n    rowsCleared,\n  );\n\n  const movePlayer = (dir) => {\n    if (!checkCollision(player, stage, { x: dir, y: 0 })) {\n      updatePlayerPos({ x: dir, y: 0 });\n    }\n  };\n\n  const startGame = () => {\n    //resetAll\n    setStage(createStage());\n    setDropTime(1000);\n    resetPlayer();\n    setGameOver(false);\n    setScore(0);\n    setRows(0);\n    setLevel(0);\n  };\n\n  const drop = () => {\n    // Increase level when 10 rows are cleared\n    if (rows > (level + 1) * 10) {\n      setLevel((prev) => prev + 1);\n      // Increase speed\n      setDropTime(1000 / (level + 1) + 200);\n    }\n\n    if (!checkCollision(player, stage, { x: 0, y: 1 })) {\n      updatePlayerPos({ x: 0, y: 1, collided: false });\n    } else {\n      // Game over\n      if (player.pos.y < 1) {\n        setGameOver(true);\n        setDropTime(null);\n      }\n      updatePlayerPos({ x: 0, y: 0, collided: true });\n    }\n  };\n\n  const keyUp = ({ keyCode }) => {\n    if (!gameOver) {\n      if (keyCode === 40) {\n        setDropTime(1000 / (level + 1) + 200);\n      }\n    }\n  };\n\n  const dropPlayer = () => {\n    setDropTime(null);\n    drop();\n  };\n\n  const move = ({ keyCode }) => {\n    if (!gameOver) {\n      if (keyCode === 37) {\n        // Move to left using arrow key 'left'\n        movePlayer(-1);\n      } else if (keyCode === 39) {\n        // Move to right using arrow key 'right'\n        movePlayer(1);\n      } else if (keyCode === 40) {\n        // Drop using arrow key 'down'\n        dropPlayer();\n      } else if (keyCode === 38) {\n        // Rotate using key 'up'\n        playerRotate(stage, 1);\n      } else if (keyCode === 80) {\n        // Pause game using key 'p'\n        setDropTime(null);\n      }\n    }\n  };\n\n  useInterval(() => {\n    drop();\n  }, dropTime);\n\n  return (\n    <StyledTetrisWrapper\n      role='button'\n      tabIndex='0'\n      onKeyDown={(e) => move(e)}\n      onKeyUp={keyUp}\n    >\n      <StyledTetris>\n        <Stage stage={stage} />\n        <aside>\n          {gameOver ? (\n            <div>\n              <Display gameOver={gameOver} text='game over!' />\n              <Display text={`score: ${score}`} />\n              <Display text={`level: ${level}`} />\n            </div>\n          ) : (\n            <div>\n              <Display text={`pause: press p`} />\n              <Display text={`resume: any arrow`} />\n              <Display text={`score: ${score}`} />\n              <Display text={`level: ${level}`} />\n            </div>\n          )}\n          <StartButton callback={startGame} />\n        </aside>\n      </StyledTetris>\n    </StyledTetrisWrapper>\n  );\n};\n\nexport default Tetris;\n","import { useState, useCallback } from 'react';\r\n\r\nimport { TETROMINOS, randomTetromino } from '../tetrominos';\r\nimport { STAGE_WIDTH, checkCollision } from '../gameHelpers';\r\n\r\nexport const usePlayer = () => {\r\n  const [player, setPlayer] = useState({\r\n    pos: { x: 0, y: 0 },\r\n    tetromino: TETROMINOS[0].shape,\r\n    collided: false,\r\n  });\r\n\r\n  const rotate = (matrix, dir) => {\r\n    // matrix = tetromino\r\n    // Make rows transpose\r\n    const rotatedTetro = matrix.map((_, index) =>\r\n      matrix.map((col) => col[index]),\r\n    );\r\n    // Reverse each row to get a rotated tetromino(matrix)\r\n    if (dir > 0) return rotatedTetro.map((row) => row.reverse());\r\n    return rotatedTetro.reverse();\r\n  };\r\n\r\n  const playerRotate = (stage, dir) => {\r\n    const clonedPlayer = JSON.parse(JSON.stringify(player));\r\n    clonedPlayer.tetromino = rotate(clonedPlayer.tetromino, dir);\r\n\r\n    const pos = clonedPlayer.pos.x;\r\n    let offset = 1;\r\n    while (checkCollision(clonedPlayer, stage, { x: 0, y: 0 })) {\r\n      clonedPlayer.pos.x += offset;\r\n      offset = -(offset + (offset > 0 ? 1 : -1));\r\n      if (offset > clonedPlayer.tetromino[0].length) {\r\n        rotate(clonedPlayer.tetromino, -dir);\r\n        clonedPlayer.pos.x = pos;\r\n        return;\r\n      }\r\n    }\r\n    setPlayer(clonedPlayer);\r\n  };\r\n\r\n  const updatePlayerPos = ({ x, y, collided }) => {\r\n    setPlayer((prev) => ({\r\n      ...prev,\r\n      pos: { x: (prev.pos.x += x), y: (prev.pos.y += y) },\r\n      collided,\r\n    }));\r\n  };\r\n\r\n  const resetPlayer = useCallback(() => {\r\n    setPlayer({\r\n      pos: { x: STAGE_WIDTH / 2 - 2, y: 0 },\r\n      tetromino: randomTetromino().shape,\r\n      collided: false,\r\n    });\r\n  }, []);\r\n\r\n  return [player, updatePlayerPos, resetPlayer, playerRotate];\r\n};\r\n","import { useState, useEffect, useCallback } from 'react';\r\n\r\nexport const useGameStatus = (rowsCleared) => {\r\n  const [score, setScore] = useState(0);\r\n  const [rows, setRows] = useState(0);\r\n  const [level, setLevel] = useState(0);\r\n\r\n  const linePoints = [40, 100, 300, 1200];\r\n\r\n  const calcScore = useCallback(() => {\r\n    // Check if there is score\r\n    if (rowsCleared > 0) {\r\n      // Formula to calculate score\r\n      setScore((prev) => prev + linePoints[rowsCleared - 1] * (level + 1));\r\n      setRows((prev) => prev + rowsCleared);\r\n    }\r\n  }, [level, linePoints, rowsCleared]);\r\n\r\n  useEffect(() => {\r\n    calcScore();\r\n  }, [calcScore, rowsCleared, score]);\r\n\r\n  return [score, setScore, rows, setRows, level, setLevel];\r\n};\r\n","import { useEffect, useRef } from 'react';\n\nexport function useInterval(callback, delay) {\n  const savedCallback = useRef();\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      const id = setInterval(tick, delay);\n      return () => {\n        clearInterval(id);\n      };\n    }\n  }, [delay]);\n}\n","import React from 'react';\n\nimport Tetris from './components/Tetris';\n\nconst App = () => (\n  <div className='App'>\n    <Tetris />\n  </div>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}